{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/templates/blog-index.js"],"names":["marginStyle","margin","flexStyle","display","flexWrap","justifyContent","alignItems","navStyle","padding","textDecoration","boxShadow","borderRadius","color","background","numberStyle","Pagination","numPages","currentPage","prevPage","nextPage","isFirst","isLast","style","to","rel","className","Array","from","length","_","i","key","BlogIndex","data","location","pageContext","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","toString","map","node","frontmatter","fields","slug","marginBottom","rhythm","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"+JAGMA,EAAc,CAClBC,OAAQ,eAGJC,EAAY,CAChBC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,UAGRC,EAAW,CACfC,QAAS,YACTC,eAAgB,OAChBC,UAAW,OACXC,aAAc,MACdC,MAAO,UACPC,WAAY,WAGRC,EAAc,CAClBb,OAAQ,UACRO,QAAS,YACTC,eAAgB,OAChBC,UAAW,OACXC,aAAc,OAuCDI,EApCI,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,SAAUC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACxE,OACE,yBAAKC,MAAK,iBAAOpB,EAAcF,KAC3BoB,GACA,kBAAC,OAAD,CAAMG,GAAIL,EAAUM,IAAI,OAAOF,MAAOf,GAAtC,MAIDa,GAAW,mCAEZ,yBAAKK,UAAU,YAAYH,MAAOpB,GAC/BwB,MAAMC,KAAK,CAAEC,OAAQZ,IAAY,SAACa,EAAGC,GAAJ,OAChC,kBAAC,OAAD,CACEC,IAAG,qBAAsBD,EAAI,GAC7BP,GAAE,KAAY,IAANO,EAAU,GAAKA,EAAI,GAC3BR,MAAK,iBACAR,EADA,CAEHF,MAAOkB,EAAI,IAAMb,EAAc,UAAY,GAC3CJ,WAAYiB,EAAI,IAAMb,EAAc,UAAY,MAGjDa,EAAI,OAKVT,GAAU,oCACTA,GACA,kBAAC,OAAD,CAAME,GAAIJ,EAAUK,IAAI,OAAOF,MAAOf,GAAtC,Q,YCEOyB,UApDG,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC7BC,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAE7BzB,EAA0BkB,EAA1BlB,YAAaD,EAAamB,EAAbnB,SACfI,EAA0B,IAAhBH,EACVI,EAASJ,IAAgBD,EACzBE,EAAWD,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAG0B,WAC3DxB,GAAYF,EAAc,GAAG0B,WAEnC,OACE,kBAAC,IAAD,CAAQT,SAAUA,EAAUK,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,wCACVC,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KACpD,OACE,6BAASjB,IAAKc,EAAKE,OAAOC,MACxB,gCACE,wBACE1B,MAAO,CACL2B,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAM5B,MAAO,CAAEZ,UAAU,QAAWa,GAAIsB,EAAKE,OAAOC,MACjDT,IAGL,+BAAQM,EAAKC,YAAYK,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQR,EAAKC,YAAYQ,aAAeT,EAAKU,gBAQzD,kBAAC,EAAD,CACEvC,SAAUA,EACVC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,QAASA,EACTC,OAAQA","file":"component---src-templates-blog-index-js-aa5d402bbab33d1119ee.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nconst marginStyle = {\n  margin: '1em 0 2em 0',\n};\n\nconst flexStyle = {\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n};\n\nconst navStyle = {\n  padding: '.25em 1em',\n  textDecoration: 'none',\n  boxShadow: 'none',\n  borderRadius: '4px',\n  color: '#ffffff',\n  background: '#007acc',\n};\n\nconst numberStyle = {\n  margin: '0 .25em',\n  padding: '.25em 1em',\n  textDecoration: 'none',\n  boxShadow: 'none',\n  borderRadius: '4px',\n};\n\nconst Pagination = ({ numPages, currentPage, prevPage, nextPage, isFirst, isLast }) => {\n  return (\n    <div style={{ ...flexStyle, ...marginStyle }}>\n      {!isFirst && (\n        <Link to={prevPage} rel=\"prev\" style={navStyle}>\n          &lt;&lt;\n        </Link>\n      )}\n      {isFirst && <span>&nbsp;</span>}\n\n      <div className=\"numbering\" style={flexStyle}>\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link\n            key={`pagination-number${i + 1}`}\n            to={`/${i === 0 ? '' : i + 1}`}\n            style={{\n              ...numberStyle,\n              color: i + 1 === currentPage ? '#ffffff' : '',\n              background: i + 1 === currentPage ? '#007acc' : '',\n            }}\n          >\n            {i + 1}\n          </Link>\n        ))}\n      </div>\n\n      {isLast && <span>&nbsp;</span>}\n      {!isLast && (\n        <Link to={nextPage} rel=\"next\" style={navStyle}>\n          &gt;&gt;\n        </Link>\n      )}\n    </div>\n  );\n};\n\nexport default Pagination;\n","// Gatsby supports TypeScript natively!\nimport React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Pagination from '../components/pagination';\nimport { rhythm } from '../utils/typography';\n\nconst BlogIndex = ({ data, location, pageContext }) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  const { currentPage, numPages } = pageContext;\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Semua artikel terkait Baca-Quran.id\" />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        );\n      })}\n\n      <Pagination\n        numPages={numPages}\n        currentPage={currentPage}\n        prevPage={prevPage}\n        nextPage={nextPage}\n        isFirst={isFirst}\n        isLast={isLast}\n      />\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, skip: $skip, limit: $limit) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}